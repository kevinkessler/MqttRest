# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class DoorState(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, state: str=None, temperature: float=None):
        """
        DoorState - a model defined in Swagger

        :param state: The state of this DoorState.
        :type state: str
        :param temperature: The temperature of this DoorState.
        :type temperature: float
        """
        self.swagger_types = {
            'state': str,
            'temperature': float
        }

        self.attribute_map = {
            'state': 'state',
            'temperature': 'temperature'
        }

        self._state = state
        self._temperature = temperature

    @classmethod
    def from_dict(cls, dikt) -> 'DoorState':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DoorState of this DoorState.
        :rtype: DoorState
        """
        return deserialize_model(dikt, cls)

    @property
    def state(self) -> str:
        """
        Gets the state of this DoorState.
        Door State

        :return: The state of this DoorState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """
        Sets the state of this DoorState.
        Door State

        :param state: The state of this DoorState.
        :type state: str
        """
        allowed_values = ["OPEN", "CLOSED", "OPENING", "CLOSING"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def temperature(self) -> float:
        """
        Gets the temperature of this DoorState.
        Current Temperature of the Garage

        :return: The temperature of this DoorState.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """
        Sets the temperature of this DoorState.
        Current Temperature of the Garage

        :param temperature: The temperature of this DoorState.
        :type temperature: float
        """

        self._temperature = temperature

